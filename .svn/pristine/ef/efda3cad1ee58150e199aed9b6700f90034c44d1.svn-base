<?php
/**
 * Auto generated from PB_module_rpc.proto at 2017-08-31 19:09:19
 *
 * protos package
 */

namespace Protos {
/**
 * PBS_ModuleSaveAll message
 */
class PBS_ModuleSaveAll extends \ProtobufMessage
{
    /* Field index constants */
    const SAVES = 1;

    /* @var array Field descriptors */
    protected static $fields = array(
        self::SAVES => array(
            'name' => 'saves',
            'repeated' => true,
            'type' => '\Protos\PBS_ModuleSaveAll_SaveInfo'
        ),
    );

    /**
     * Constructs new message container and clears its internal state
     */
    public function __construct()
    {
        $this->reset();
    }

    /**
     * Clears message values and sets default ones
     *
     * @return null
     */
    public function reset()
    {
        $this->values[self::SAVES] = array();
    }

    /**
     * Returns field descriptors
     *
     * @return array
     */
    public function fields()
    {
        return self::$fields;
    }

    /**
     * Appends value to 'saves' list
     *
     * @param \Protos\PBS_ModuleSaveAll_SaveInfo $value Value to append
     *
     * @return null
     */
    public function appendSaves(\Protos\PBS_ModuleSaveAll_SaveInfo $value)
    {
        return $this->append(self::SAVES, $value);
    }

    /**
     * Clears 'saves' list
     *
     * @return null
     */
    public function clearSaves()
    {
        return $this->clear(self::SAVES);
    }

    /**
     * Returns 'saves' list
     *
     * @return \Protos\PBS_ModuleSaveAll_SaveInfo[]
     */
    public function getSaves()
    {
        return $this->get(self::SAVES);
    }

    /**
     * Returns 'saves' iterator
     *
     * @return \ArrayIterator
     */
    public function getSavesIterator()
    {
        return new \ArrayIterator($this->get(self::SAVES));
    }

    /**
     * Returns element from 'saves' list at given offset
     *
     * @param int $offset Position in list
     *
     * @return \Protos\PBS_ModuleSaveAll_SaveInfo
     */
    public function getSavesAt($offset)
    {
        return $this->get(self::SAVES, $offset);
    }

    /**
     * Returns count of 'saves' list
     *
     * @return int
     */
    public function getSavesCount()
    {
        return $this->count(self::SAVES);
    }
}
}